{"version":3,"sources":["containers/Index/Index.js","utils/server.js","utils/auth.js","components/Form/Form.js","utils/messages.js","containers/Login.js","utils/user.js","components/pagingButtons/PagingButtons.js","containers/users/Users.js","components/confirmationForm/ConfirmationForm.js","containers/user/UserPage.js","containers/NotFound.js","containers/Register.js","utils/restaurant.js","containers/about/About.js","components/nav/Nav.js","containers/EditUser.js","utils/itemToOrder.js","containers/EditItem.js","containers/ItemsToOrder/ItemsToOrder.js","containers/ItemPage/ItemPage.js","utils/order.js","containers/Orders/Orders.js","containers/NewItem.js","containers/Settings/Settings.js","utils/room.js","containers/Rooms/Rooms.js","containers/NewRoom.js","containers/RoomPage/RoomPage.js","containers/OrderPage/OrderPage.js","containers/BotAuth.js","containers/App.js","serviceWorker.js","index.js"],"names":["Index","document","body","className","title","id","ErrorTypes","None","Unauthorized","Forbidden","NotFound","NotAcceptable","ServerError","ConnecionError","Method","GET","POST","PUT","DELETE","DataLoadingStatus","Undefined","NotLoaded","Loading","Loaded","Server","uri","method","reqOptions","jwt","localStorage","getItem","headers","Authorization","fetch","response","status","error","data","json","console","log","loginWithFormData","redirect","a","makeARequest","result","authResult","error_code","processJWT","token","window","location","setItem","userBase64","split","user","atob","logOut","removeItem","alert","registerWithFormData","getCurrentUser","userString","JSON","parse","err","InputType","Multiple","Text","TextArea","Selector","File","Button","MessageColor","Default","Red","Green","Form","inputs","cb","labels","Fragment","message","text","color","onSubmit","e","preventDefault","target","legend","parseInputs","inline","map","input","index","key","length","type","props","style","display","disabledOption","disabled","options","el","prop","value","name","hidden","htmlFor","label","onClick","footer","Messages","Empty","ConnectionError","pathname","to","Redirect","Saved","QueryWithNoResults","NothingToShow","Successfully","Object","assign","LoginFirst","IncorrectAuthData","DefaultMessages","Login","useState","required","maxLength","pattern","placeholder","formProps","setFormProps","setFormInfo","messageText","messageColor","query","qs","search","form","formData","FormData","bodyData","URLSearchParams","info","String","UserRoles","User","Waiter","Admin","getRoleName","role","isNaN","Number","page","numberOfRecordsOnAPage","fullname","set","username","password","telegramId","userId","itemId","PagingButtons","pagesAmount","currentPage","pages","i","push","visibility","onChange","event","selectedIndex","defaultValue","_el","WarningType","Users","warning","setWarning","isLoaded","users","setQuery","sessionUser","Message","loadData","getAll","then","Math","ceil","numberOfRecords","getElementById","src","alt","ConfirmationForm","onConfirm","onDecline","UserPage","match","params","setUser","confirm","setConfirm","getById","foundUser","showExtended","confirmationForm","deleteById","owner","Date","registeredAt","toLocaleString","amountOfOrders","class","LoginIsAlreadyUsed","PasswordMustMatch","Register","password_value","get","confirm_value","Restaurant","About","loadingStatus","restaurant","setRestaurant","logoUrl","contacts","address","Nav","restaurantName","setRestaurantName","EditUser","userToUse","formMessage","setFormMessage","setSubmitButtonFaded","faded","opacity","confirmPassword","PasswordsNotMatch","update","new_user","values","ItemToOrder","ImageTooLarge","item","description","weight","price","Item","updateById","accept","ItemsToOrder","NumberOfRecordsOnAPage","admin","items","setItems","sesstionUser","loadItems","amountOfRecords","itemsToOrder","onSearchSubmit","imageUrl","ItemPage","added","setAdded","confirmationWindowOpened","setConfirmationWindowOpened","toFixed","addItemToCurrentOrder","Order","numberOfRecordsOnPage","Orders","deleteModeOn","setDeleteModeOn","orders","setOrders","order","total","getAttribute","order_id","NewItem","insert","setTimeout","Settings","Room","restaurantId","Rooms","restaurant_id","rooms","setRooms","renderRoom","room","amountOfTables","slice","NewRoom","keys","RoomPage","size","height","width","setRoom","roomId","room_id","OrderPage","totalPrice","setOrder","user_id","currentOrder","_id","callWaiter","setCurrentOrderCompleted","startNewOrder","new_order","BotAuth","App","path","exact","component","EditItem","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb961a57.chunk.js","sourcesContent":["import React from 'react';\n\nimport './index.css';\n\nexport default function Index () {\n    document.body.className = \"background\";\n    document.title = \"Restaurant\";\n    return (\n        <div className=\"center\" id=\"main_box\">\n            <p id=\"welcome_label\">\n                WELCOME\n            </p>\n            <p className=\"emphasized\" id=\"main_logo\">\n                Restaurant\n            </p>\n            <br />\n            <p id=\"info\">\n                Our restaurant can be privatized from Tuesday to Saturday, for lunch and dinner.\n                <br /> \n                Our parking valet is always available.\n                <br />\n                All gentlemen are requested to wear a jacket.\n                <br />\n                We accept any kind of payment method, except checks.\n            </p> \n        </div>\n    );\n}","const ErrorTypes = {\n    None : 0,\n    Unauthorized : 401,\n    Forbidden : 403,\n    NotFound : 404,\n    NotAcceptable : 406,\n    ServerError : 500,\n    ConnecionError : 888,\n}\n\nconst Method = {\n    GET : 0,\n    POST : 1,\n    PUT : 2,\n    DELETE : 3\n}\n\nconst DataLoadingStatus = {\n    Undefined : 0,\n    NotLoaded : 1,\n    Loading : 2,\n    Loaded : 3\n}\n\nexport default class Server {\n\n    static get ErrorTypes() {\n        return ErrorTypes;\n    }\n\n    static get Method() {\n        return Method;\n    }\n\n    static get DataLoadingStatus() {\n        return DataLoadingStatus;\n    }\n\n    static async makeARequest(uri, method, body) {\n        try {\n            let reqOptions = {\n                body : body\n            };\n            const jwt = localStorage.getItem(\"jwt\");\n            if (jwt)\n                reqOptions.headers = { Authorization: `Bearer ${jwt}`};\n            switch (method) {\n                case Method.POST:\n                    reqOptions.method = \"POST\";\n                    break;\n                \n                case Method.PUT:\n                    reqOptions.method = \"PUT\";\n                    break;\n    \n                case Method.DELETE:\n                    reqOptions.method = \"DELETE\";\n                    break;\n    \n                default:\n                    break;\n            }\n            const response = await fetch(\"/api/v1\" + uri, reqOptions);\n            switch(response.status) {\n                case 403:\n                    return {\n                        error : ErrorTypes.Forbidden\n                    }\n\n                case 401:\n                    return {\n                        error : ErrorTypes.Unauthorized\n                    }\n\n                case 406:\n                    return {\n                        error : ErrorTypes.NotAcceptable,\n                        data : response.json()\n                    }\n    \n                case 500:\n                    return {\n                        error : ErrorTypes.ServerError\n                    }\n    \n                case 404:\n                    return {\n                        error : ErrorTypes.NotFound\n                    }\n    \n                default:\n                    break;\n            }\n            return {\n                error : ErrorTypes.None,\n                data : await response.json()\n            };\n        } catch(err) {\n            console.log(err);\n            return {\n                error : ErrorTypes.ConnecionError\n            }\n        }\n    }\n\n}","import Server from \"./server\";\n\nexport async function loginWithFormData(body, redirect) {\n    try {\n        const result = await Server.makeARequest('/login', Server.Method.POST, body);\n        if (result.error)\n            return result;\n        const authResult = result.data;\n        if (!authResult || authResult.error_code)\n            return result;\n        console.log(result);\n        const jwt = authResult.token;\n        processJWT(jwt);\n        window.location = redirect ? redirect : '/';\n        return result;\n    } catch(err) {\n        console.log(err);\n    }\n}\n\nexport function processJWT (jwt) {\n    localStorage.setItem(\"jwt\", jwt);\n    const userBase64 = jwt.split('.')[1];\n    const user = window.atob(userBase64);\n    localStorage.setItem(\"user\", user);\n}\n\nexport async function logOut() {\n    try {\n        localStorage.removeItem('jwt');\n        localStorage.removeItem('user');\n        await Server.makeARequest('/logout', Server.Method.POST);\n        document.location = '/';\n    } catch (err) {\n        console.log(err);\n        alert('Server error occured');\n    }\n}\n\nexport async function registerWithFormData(body) {\n    try {\n        const result = await Server.makeARequest(\"/register\", Server.Method.POST, body);\n        if (!result.error && !result.data.error_code)\n            window.location = '/auth/login';\n        return result;\n    } catch(err) {\n        console.log(err);\n    }\n}\n\nexport function getCurrentUser() {\n    try {\n        const userString = localStorage.getItem(\"user\");\n        return JSON.parse(userString);\n    } catch (err) {\n        console.log(err);\n        localStorage.removeItem(\"jwt\");\n        localStorage.removeItem(\"user\");\n    }\n}","import React from 'react';\n\nimport './form.css';\n\nconst InputType = { \n    None : 0,\n    Multiple : 1,\n    Text : 2,\n    TextArea : 3,\n    Selector : 4,\n    File : 5,\n    Button : 6\n}\n\nconst MessageColor = {\n    Default : 0,\n    Red : 1,\n    Green : 2\n}\n\nfunction Form({ inputs, cb, labels }) {\n\n    function parseInputs (inputs, inline = false) {\n        return inputs.map ((input, index) => {\n            return (\n                <div key = {index} className={(inline && index !== 0 ? \"form_inline\" : \"\") + ((inline && index === inputs.length - 1) ? \" form_inline_last\" : \"\" )}>\n                    { (input.type === InputType.Text) ? <input {...input.props} className=\"input_field form_input\"/> : '' }\n                    { (input.type === InputType.Multiple) ?\n                        <div style = {{display : 'table'}}>\n                            <div className=\"form_inputs_container\">\n                                {\n                                    parseInputs(input.inputs, true)\n                                }\n                            </div>\n                        </div>\n                    : '' }\n                    { (input.type === InputType.TextArea) ? <textarea {...input.props} className = \"input_field form_input form_text_area\"/> : '' }\n                    {\n                        (input.type === InputType.Selector) ?\n                        <select {...input.props} >\n                            {\n                                input.disabledOption ? \n                                <option disabled>{input.disabledOption}</option>\n                                : ''\n                            }\n                            {\n                                input.options.map((el, index) => {\n                                    const prop = {\n                                        key : index,\n                                        value : el.value\n                                    }\n                                    return <option {...prop}>{ el.name }</option>\n                                })\n                            }\n                        </select>\n                        : ''\n                    }\n                    {\n                        (input.type === InputType.File) ?\n                        <React.Fragment>\n                            <input hidden {...input.props}/>\n                            <div className=\"button_outter\">\n                                <label htmlFor={ input.props.id }>\n                                    <div className=\"button\">\n                                        { input.label }\n                                    </div>\n                                </label>\n                            </div>\n                        </React.Fragment>\n                        : ''\n                    }\n                    {\n                        (input.type === InputType.Button) ?\n                        <div className=\"button_outter\">\n                            <div className=\"button\" onClick={input.onClick}>\n                                { input.label }\n                            </div>\n                        </div>\n                        : ''\n                    }\n                </div>\n            )\n        })\n    }\n\n    return (\n        <React.Fragment>\n            {\n                (labels.message.text && labels.message.text !== \"\") ?  \n                    <div className = \"shadow card_view form_info\">\n                        <p className={ \"form_info_text\" + ( labels.message.color ===  MessageColor.Red ? \" form_red\" : \"\") + ( labels.message.color ===  MessageColor.Green ? \" form_green\" : \"\")}>\n                            { labels.message.text }\n                        </p>\n                    </div>\n                : ''\n            }\n\n            <form className = \"shadow card_view form\" onSubmit={ e => {e.preventDefault(); cb(e.target)} }>\n                <p className=\"emphasized form_legend\">{labels.legend}</p>\n                {\n                    parseInputs(inputs)\n                }\n                \n                <div className=\"button_outter\">\n                    <label htmlFor=\"submit\">\n                        <div id=\"submit_button\" className=\"button\">\n                            Submit\n                        </div>\n                    </label>\n                </div>\n                <input type=\"submit\" id=\"submit\" hidden/>\n                <p className = \"form_footer\" >\n                    { labels.footer }\n                </p>\n            </form>\n        </React.Fragment>\n    )\n}\n\nForm.InputType = InputType;\nForm.MessageColor = MessageColor;\n\nexport default Form;","import React from 'react';\n\nimport { Redirect } from 'react-router-dom';\n\nconst Messages = {\n    Empty : \"\",\n    ServerError : \"Server error occured\",\n    ConnectionError : \"There are some troubles with Your internet connection\",\n    NotFound : \"Record with such id doesn't exist\",\n    Loading : \"Loading...\",\n    Forbidden : \"You have no right to access this page\",\n    Unauthorized : (pathname) => <Redirect to= { \"/auth/login?info=mustLogin&redirect=\" + pathname } />,\n    Redirect : (location) => <Redirect to= { location } />,\n    Saved : \"Saved\",\n    QueryWithNoResults : \"Nothing was found. Try another search term.\",\n    NothingToShow : \"There's nothing to see at yet\",\n    Successfully : \"Successfully\"\n}\n\nexport default Messages;","import React, { useState } from 'react';\nimport * as qs from 'query-string';\nimport { Link } from 'react-router-dom';\n\nimport { loginWithFormData, logOut } from '../utils/auth';\nimport Form from '../components/Form/Form';\nimport Server from '../utils/server';\nimport DefaultMessages from '../utils/messages';\n\nconst Messages = Object.assign ({\n    LoginFirst : \"You must sing in first\",\n    IncorrectAuthData : \"Login or password was entered incorectly.\"\n}, DefaultMessages);\n\nexport default function Login (props) {\n    document.body.className = \"background\";\n    document.title = \"Sign in\";\n\n    const [formProps, setFormProps] = useState({\n        inputs : [\n            {\n                type : Form.InputType.Text,\n                props : {\n                    required : true,\n                    type : \"text\",\n                    name : \"username\",\n                    maxLength : \"32\",\n                    pattern : \"^[a-zA-Z0-9]+$\",\n                    placeholder : \"Login\",\n                    className : \"input_field form_input\"\n                }\n            },\n            {\n                type : Form.InputType.Text,\n                props : {\n                    required : true,\n                    type : \"password\",\n                    name : \"password\",\n                    maxLength : \"32\",\n                    placeholder : \"Password\",\n                    className : \"input_field form_input\"\n                }\n            }\n        ],\n        cb : login,\n        labels : {\n            message : {\n                text : Messages.Empty,\n                color : Form.MessageColor.Default\n            },\n            legend : \"Sing in\",\n            footer : <React.Fragment>Do not have an account? <Link to=\"/auth/register\"> Register </Link></React.Fragment>\n        }\n    });\n\n    function setFormInfo(messageText, messageColor = Form.MessageColor.Default) {\n        const props = Object.assign({}, formProps);\n        props.labels.message = {\n            text : messageText,\n            color : messageColor\n        };\n        setFormProps(props);\n    }\n\n    function getFormInfo() {\n        return formProps.labels.message.text;\n    }\n\n    const query = qs.parse(props.location.search);\n    if (query.info && String (query.info) === \"mustLogin\" && getFormInfo() !== Messages.LoginFirst) {\n        localStorage.removeItem(\"jwt\");\n        localStorage.removeItem(\"user\");\n        setFormInfo(Messages.LoginFirst);\n    }\n\n    async function login(form) {\n\n        setFormInfo(Messages.Empty);\n\n        const formData = new FormData(form);\n        const bodyData = new URLSearchParams(formData);\n\n        const result = await loginWithFormData(bodyData, query.redirect);\n\n        if (result.data)\n            return;\n        if (result.error === Server.ErrorTypes.ServerError) {\n            setFormInfo(Messages.ServerError, Form.MessageColor.Red);\n            return;\n        }\n        if (result.error === Server.ErrorTypes.ConnecionError) {\n            setFormInfo(Messages.ConnectionError, Form.MessageColor.Red);\n            return;\n        }\n        setFormInfo(Messages.IncorrectAuthData, Form.MessageColor.Red);\n    }\n\n    return (\n        <div className = \"center\">\n            {\n                localStorage.getItem(\"jwt\") === null\n                ?\n                <Form {...formProps}/>\n                :\n                <React.Fragment>\n                    <div className=\"text_container\">\n                        You have already signed in.\n                    </div>\n                    <div className=\"button_outter\">\n                        <div className=\"button\" onClick={ async () => await logOut() }>\n                            Sign out\n                        </div>\n                    </div>\n                </React.Fragment>\n            }\n        </div>\n    );\n}","import Server from './server'\n\nconst UserRoles = {\n    User : 0,\n    Waiter : 1, \n    Admin : 2\n}\n\nexport function getRoleName (role) {\n    if (isNaN(role))\n        return \"Unknown\";\n    switch (Number(role)) {\n        case 0:\n            return \"User\";\n        \n        case 1:\n            return \"Waiter\";\n\n        case 2:\n            return \"Admin\";\n\n        default:\n            return \"Unknown\";\n    }\n}\n\nexport default class User {\n\n    static get UserRoles() {\n        return UserRoles;\n    }\n\n    static getById(id) {\n        return Server.makeARequest('/users/' + id);\n    }\n\n    static getAll (page, query, numberOfRecordsOnAPage) {\n        let uri = `/users?numberOfRecordsOnAPage=${numberOfRecordsOnAPage}&page=`;\n        if (page)\n            uri += page;\n        else\n            uri += 1;\n        if (query)\n            uri += \"&query=\" + query;\n        return Server.makeARequest(uri);\n    }\n\n    static update (user){\n        let body = new URLSearchParams();\n        if (user.fullname)\n            body.set(\"fullname\", user.fullname);\n        if (user.username)\n            body.set(\"username\", user.username);\n        if (user.password)\n            body.set(\"password\", user.password);\n        if (user.role)\n            body.set(\"role\", user.role);\n        if (user.telegramId)\n            body.set(\"telegramId\", user.telegramId);\n        return Server.makeARequest('/users/'+user.id, Server.Method.PUT, body);\n    }\n\n    static deleteById (id){\n        return Server.makeARequest('/users/' + id, Server.Method.DELETE);\n    }\n\n    static startNewOrder (id) {\n        return Server.makeARequest('/users/' + id + \"?option=startNewOrder\", Server.Method.PUT);\n    }\n\n    static addItemToCurrentOrder (userId, itemId) {\n        const body = new FormData();\n        body.set(\"new_item_to_order\", itemId);\n        return Server.makeARequest('/users/' + userId, Server.Method.PUT, body);\n    }\n\n    static callWaiter(userId) {\n        return Server.makeARequest(\"/callWaiter?user_id=\" + userId);\n    }\n\n    static setCurrentOrderCompleted(userId) {\n        return Server.makeARequest('/users/' + userId + \"?option=setCurrentOrderCompleted\", Server.Method.PUT);\n    }\n}\n","import React from 'react';\n\nimport './pagingButtons.css';\n\nexport default function PagingButtons({pagesAmount, currentPage, cb }) {\n    let pages = [];\n    for (let i = 0 ; i < pagesAmount; i++)\n        pages.push(i + 1);\n    return (\n        <div id=\"pagingButtonsContainer\">\n            { \n                pagesAmount > 1\n                ?\n                    <React.Fragment>\n                        <div id=\"leftPageButton\" className=\"arrow_button\" onClick={() => cb(currentPage - 1) } style={{visibility: (currentPage === 1) ? 'hidden' : 'visible'}}>\n                            {\"<\"}\n                        </div>\n                        Page&nbsp;\n                        <select id=\"pageSelector\" onChange={event => cb(Number(event.target.options[event.target.selectedIndex].value)) } defaultValue={currentPage}>\n                            <option disabled>Pages</option>\n                            {\n                                pages.map((_el, index) => {\n                                    return <option id={ \"page\" + (index + 1) } key={index} value={ index + 1 }>{ index + 1 }</option>\n                                })\n                            }\n                        </select>\n                        &nbsp;of { pagesAmount }\n                        <div id=\"rightPageButton\" className=\"arrow_button\" onClick={() => cb(currentPage + 1) } style={{visibility: (currentPage === pagesAmount) ? 'hidden' : 'visible'}}>\n                            {\">\"}\n                        </div>\n                    </React.Fragment>\n                : ''\n            }\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './users.css';\nimport Server from '../../utils/server';\nimport User, { getRoleName } from '../../utils/user';\nimport { getCurrentUser } from '../../utils/auth';\nimport PagingButtons from './../../components/pagingButtons/PagingButtons';\nimport Message from '../../utils/messages';\nimport Messages from '../../utils/messages';\n\nconst WarningType = {\n    None : 0,\n    ServerError : 1,\n    ConnecionError : 2,\n    Loading : 3\n};\n\nexport default function Users(props) {\n    document.body.className = \"\";\n    document.title = \"Users\";\n\n    const numberOfRecordsOnAPage = 8;\n\n    const [warning, setWarning] = useState(WarningType.None);\n    const [users, setQuery] = useState({\n        isLoaded : false,\n        data : [],\n        pagesAmount : 0,\n        query : \"\",\n        page : 1\n    });\n\n    const sessionUser = getCurrentUser();\n    if (!sessionUser)\n        return Messages.Unauthorized(props.location.pathname);\n    if (sessionUser && sessionUser.role !== User.UserRoles.Admin)\n        return (\n            <div className=\"center\">\n                {Message.Forbidden}\n            </div>\n        );\n\n    function setPage(page) {\n        users.page = page;\n        users.isLoaded = false;\n        loadData();\n    }\n\n    function onSearchSubmit () {\n        users.page = 1;\n        users.query = document.getElementById('search_field').value;\n        users.isLoaded = false;\n        loadData();\n    }\n\n    function loadData () {\n        if (users.isLoaded)\n            return;\n        if (warning !== WarningType.Loading)\n            setWarning(WarningType.Loading);\n        User.getAll(users.page, users.query, numberOfRecordsOnAPage)\n            .then ((result) => {\n                if (result.error) {\n                    users.isLoaded = true;\n                    switch(result.error) {\n                        case Server.ErrorTypes.Unauthorized:\n                            return document.location = \"/auth/login?info=mustLogin&redirect=\" + props.location.pathname;\n\n                        case Server.ErrorTypes.ConnecionError:\n                            setWarning(WarningType.ConnecionError);\n                            break;\n\n                        default:\n                            setWarning(WarningType.ServerError);\n                    }\n                    return;\n                }\n                setQuery({\n                    isLoaded : true,\n                    data : result.data.users,\n                    pagesAmount : Math.ceil ((result.data.numberOfRecords ) / numberOfRecordsOnAPage),\n                    query : users.query,\n                    page : users.page\n                });\n                if (warning !== WarningType.None)\n                    setWarning(WarningType.None);\n                if (document.getElementById('search_field'))\n                    document.getElementById('search_field').value = users.query;\n            });\n    }\n\n    if (!users.isLoaded)\n        loadData();\n\n    return (\n        <React.Fragment>\n        {\n            warning !== WarningType.None ?\n                <div className=\"center\">\n                    { warning === WarningType.ServerError ? Message.ServerError : \"\" }\n                    { warning === WarningType.ConnecionError ? Message.ConnectionError : \"\" }\n                    { warning === WarningType.Loading ? Message.Loading : \"\" }\n                </div>\n            :\n            <React.Fragment>\n                <div className=\"table midMarginTop\" id=\"table\">\n                    <form onSubmit= { e => { e.preventDefault(); onSearchSubmit() } }>\n                        <input id=\"search_field\" type=\"text\" name=\"query\" placeholder=\"Search by username\" maxLength=\"32\" className=\"input_field\" />\n                        <input id=\"search_submit_button\" type=\"image\" src=\"/images/search.png\" alt=\"Search\"/>\n                    </form>\n\n                    {\n                        users.data.length\n                        ?\n                        <React.Fragment>\n                            <div className = \"first_table_row table_row\">\n                                <div className = \"table_cell users_table_cell\">\n                                    Username\n                                </div>\n                                <div className = \"table_cell users_table_cell\">\n                                    Fullname\n                                </div>\n                                <div className = \"table_cell users_table_cell\">\n                                    Role\n                                </div>\n                            </div>\n                            {\n                                users.data.map((user, index) => {\n                                    return <Link key={index} to = {\"/users/\" + user.id} className=\"no_link\">\n                                                <div className = \"table_row\">\n                                                    <div className = \"table_cell users_table_cell\">\n                                                        {user.username}\n                                                    </div>\n                                                    <div className = \"table_cell users_table_cell\">\n                                                        {user.fullname}\n                                                    </div>\n                                                    <div className = \"table_cell users_table_cell\">\n                                                        { getRoleName(user.role) }\n                                                    </div>\n                                                </div>\n                                            </Link>\n                                })\n                                \n                            }\n                        </React.Fragment>\n                        :\n                        <React.Fragment>\n                            {\n                                users.query\n                                ?\n                                <div className=\"center\">\n                                    Nothing was found. Try another search term.\n                                </div>\n                                :\n                                <div className=\"center\">\n                                    There's nothing to see here at yet\n                                </div>\n                            }\n                        </React.Fragment>\n                    }\n                </div>\n                <PagingButtons pagesAmount={ users.pagesAmount } cb={ setPage } currentPage={ users.page } />\n            </React.Fragment>\n        }\n        </React.Fragment>\n    )\n}\n","import React from 'react';\n\nimport './confirmationForm.css';\n\nexport default function ConfirmationForm ({ onConfirm, onDecline, message}) {\n    \n    return (\n        <div id=\"form_background\">\n            <div className=\"center card_view shadow\" id=\"conf_form\">\n                <div>\n                    <p id=\"conf_text\" >\n                        { message }\n                    </p>\n                </div>\n                <div id =\"buttonBox\">\n                    <div className=\"button conf_button\" onClick={ onDecline }>\n                        Cancel\n                    </div>\n                    <div className=\"button conf_button\" onClick={ onConfirm }>\n                        Yes\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport './user.css'\nimport User, { getRoleName } from '../../utils/user';\nimport { getCurrentUser, logOut } from '../../utils/auth';\nimport Server from '../../utils/server';\nimport Message from '../../utils/messages';\nimport ConfirmationForm from '../../components/confirmationForm/ConfirmationForm';\n\nconst WarningType = {\n    None : 0,\n    ServerError : 1,\n    Unauthorized : 2,\n    NotFound : 3,\n    Loading : 4,\n    ConnecionError : 5\n}\n\nexport default function UserPage (props) {\n\n    document.body.className = \"\";\n    const id = props.match.params.id;\n    const [user, setUser] = useState ({\n        isLoaded : false,\n        data : {}\n    });\n    const [warning, setWarning] = useState(WarningType.Loading);\n    const [confirm, setConfirm] = useState(false);\n    document.title = user.data.fullname ? user.data.fullname : \"User\";\n\n    if (!user.isLoaded || user.data.id !== id)\n        User.getById(id)\n            .then(result => {\n                const error = result.error;\n                if (error) {\n                    user.isLoaded = true;\n                    switch (error) {\n                        case Server.ErrorTypes.Unauthorized:\n                            setWarning(WarningType.Unauthorized);\n                            break;\n\n                        case Server.ErrorTypes.ConnecionError:\n                            setWarning(WarningType.ConnecionError);\n                            break;\n\n                        case Server.ErrorTypes.NotFound:\n                            setWarning(WarningType.NotFound);\n                            break;\n\n                        default:\n                            setWarning(WarningType.ServerError);\n                    } \n                    return;\n                }\n                const foundUser = result.data.user;\n                foundUser.showExtended = sessionUser.role === User.UserRoles.Admin || sessionUser.id === foundUser.id;\n                setUser({\n                    isLoaded : true,\n                    data : foundUser\n                });\n                setWarning(Server.ErrorTypes.None);\n            });\n\n    const confirmationForm = {\n        message : \"Are you sure?\",\n        onConfirm : () => {\n            User.deleteById(id)\n                .then(() => {\n                    if (sessionUser.id === user.data.id)\n                        logOut();\n                    else\n                        document.location = '/users';\n                });\n        },\n        onDecline : () => {\n            setConfirm(false);\n        }\n    }\n\n    const sessionUser = getCurrentUser();\n    console.log(sessionUser);\n    if (!sessionUser)\n        return <Redirect to={ \"/auth/login?info=mustLogin&redirect=\" + props.location.pathname }/>\n    \n    const owner = sessionUser.id === id;\n    \n    return (\n        <React.Fragment>\n        {\n            warning ?\n            <div className=\"center\">\n                { (warning === WarningType.ServerError) ? Message.ServerError : '' }\n                { (warning === WarningType.Unauthorized) ? <Redirect to= { \"/auth/login?info=mustLogin&redirect=\" + props.location.pathname } /> : '' }\n                { (warning === WarningType.ConnecionError) ? Message.ConnecionError : '' }\n                { (warning === WarningType.NotFound) ? Message.NotFound : '' }\n                { (warning === WarningType.Loading) ? Message.Loading : '' }\n            </div> \n            :\n            <React.Fragment>\n                <div id = \"greet_background\">\n                    <div id = \"greet_container\">\n                        <div id=\"greet_label\">\n                            <p className = \"emphasized\" id=\"greetings\">\n                                { owner ? \"Hi, \" : \"\"}\n                                { user.data.fullname }\n                            </p>\n                            <p id = \"greet_username\">\n                                { owner ? \"Your \" : \"\"}\n                                username is&nbsp;\n                                { user.data.username }\n                            </p>\n                        </div>\n                        {\n                            owner ?\n                            <div id=\"logout_button_outter\">\n                                <div className=\"button\" onClick={logOut} >\n                                    Sign out\n                                </div>\n                            </div>\n                            : \"\"\n                        }\n                    </div>\n                </div>\n                <div className=\"table\" id=\"user_table\">\n                    <div className=\"flex\">\n                        <div className=\"feature_item\">\n                            <div className=\"faded\">\n                                ROLE\n                            </div>\n                            <div className=\"feature_detail\">\n                                { getRoleName(user.data.role) }\n                            </div>\n                        </div>\n                        <div className=\"feature_item\">\n                            <div className=\"faded\">\n                                SING UP DATE\n                            </div>\n                            <div className=\"feature_detail\">\n                                {new Date (user.data.registeredAt).toLocaleString()}\n                            </div>\n                        </div>\n                        <div className=\"feature_item\">\n                            <div className=\"faded\">\n                                NUMBER OF ORDERS\n                            </div>\n                            <div className=\"feature_detail\">\n                                { user.data.amountOfOrders }\n                            </div>\n                        </div>\n                    </div>\n                    {\n                        user.data.showExtended ?\n                        <React.Fragment>\n                            <div className=\"flex\">\n                                <div className=\"feature_item\">\n                                    <div className=\"faded\">\n                                        Telegram ID\n                                    </div>\n                                    <div className=\"feature_detail\">\n                                        {user.data.telegramId ? user.data.telegramId : \"-\"}\n                                    </div>\n                                </div>\n                                <div className=\"feature_item\">\n                                    <div className=\"faded\">\n                                        PREFERED LANGUAGE\n                                    </div>\n                                    <div className=\"feature_detail\">\n                                        English\n                                    </div>\n                                </div>\n                                <div className=\"feature_item\">\n                                    <div className=\"faded\">\n                                        PAYMENT METHOD\n                                    </div>\n                                    <div className=\"feature_detail\">\n                                        -\n                                    </div>\n                                </div>\n                            </div>\n                            <div id=\"button_box\">\n                                <Link to={props.location.pathname + \"/edit\"} className=\"no_link\">\n                                    <div className=\"button user_action_button\">\n                                        Edit\n                                    </div>\n                                </Link>\n                                {\n                                    owner ?\n                                    <Link to=\"/orders\" className=\"button user_action_button no_link\">\n                                        Order history\n                                    </Link>\n                                    :\n                                    <Link to={\"/order?user_id=\" + user.data.id} className=\"button user_action_button no_link\">\n                                        Current order\n                                    </Link>\n                                }\n                                <div className=\"button user_action_button\" onClick = {() => setConfirm(true)}>\n                                    <font style={{color : \"red\"}}>\n                                        Delete account\n                                    </font>\n                                </div>\n                            </div>\n                        </React.Fragment>\n                        : ''\n                    }\n                </div>\n                {\n                    confirm ?\n                        <ConfirmationForm {...confirmationForm}/>\n                    : ''\n                }\n            </React.Fragment>\n        }\n        </React.Fragment>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => {\n    document.body.className = \"background\";\n    document.title = \"Not Found\";\n    return (\n        <div className=\"text_container center\">\n            <p className=\"big_label\">\n                The page you're looking<br />for can't be found\n            </p>\n            <div class=\"button_outter\">\n                <Link to = \"/\" className = {\"no_link\"} >\n                    <div class=\"button\">\n                        Home\n                    </div>\n                </Link>\n            </div>\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { registerWithFormData } from '../utils/auth';\nimport Server from '../utils/server';\nimport Form from '../components/Form/Form';\nimport DefaultMessages from '../utils/messages';\n\nconst Messages = Object.assign ({\n    LoginIsAlreadyUsed : \"Entered login is already used.\",\n    PasswordMustMatch : \"Passwords must match\"\n}, DefaultMessages)\n\nexport default function Register() {\n    const [formProps, setFormProps] = useState ({\n        inputs : [\n            {\n                type : Form.InputType.Text,\n                props : {\n                    required : true,\n                    type : \"text\",\n                    name : \"username\",\n                    maxLength : \"32\",\n                    pattern : \"^[a-zA-Z0-9]+$\",\n                    placeholder : \"Login\",\n                    className : \"input_field form_input\"\n                }\n            },\n            {\n                type : Form.InputType.Text,\n                props : {\n                    required : true,\n                    type : \"text\",\n                    name : \"fullname\",\n                    maxLength : \"32\",\n                    placeholder : \"Full name\",\n                    className : \"input_field form_input\"\n                }\n            },\n            {\n                type : Form.InputType.Text,\n                props : {\n                    required : true,\n                    type : \"password\",\n                    name : \"password\",\n                    maxLength : \"32\",\n                    placeholder : \"Password\",\n                    className : \"input_field form_input\"\n                }\n            },\n            {\n                type : Form.InputType.Text,\n                props : {\n                    required : true,\n                    type : \"password\",\n                    name : \"confirm_password\",\n                    maxLength : \"32\",\n                    placeholder : \"Confirm password\",\n                    className : \"input_field form_input\"\n                }\n            }\n        ],\n        cb : register,\n        labels : {\n            message : {\n                text : Messages.Empty,\n                color : Form.MessageColor.Default\n            },\n            legend : \"Sing up\",\n            footer : <React.Fragment>Already have an account? <Link to=\"/auth/login\"> Login </Link></React.Fragment>\n        }\n    });\n\n    function setFormInfo(messageText, messageColor = Form.MessageColor.Red) {\n        const props = Object.assign({}, formProps);\n        props.labels.message = {\n            text : messageText,\n            color : messageColor\n        };\n        setFormProps(props);\n    }\n\n    if (localStorage.getItem('jwt'))\n        return <Redirect to=\"login\" />\n\n    document.body.className = \"background\";\n    document.title = \"Registration\";\n\n    async function register(form) {\n        setFormInfo(Messages.Empty);\n        \n        const formData = new FormData(form);\n        const bodyData = new URLSearchParams(formData);\n        \n        const password_value = bodyData.get(\"password\");\n        const confirm_value = bodyData.get(\"confirm_password\");\n\n        \n        if (password_value !== confirm_value) {\n            setFormInfo(Messages.PasswordMustMatch);\n            return;\n        }\n\n        const result = await registerWithFormData(bodyData);\n        \n        if (result && result.data && !result.data.error_code)\n            return;\n\n        if (result.error) {\n            switch (result.error) {\n                case Server.ErrorTypes.ConnecionError:\n                    setFormInfo(Messages.ConnectionError);\n                    break;\n\n                case Server.ErrorTypes.NotAcceptable:\n                    switch (Number(result.data.error_code)) {\n                        case 7:\n                            setFormInfo(Messages.LoginIsAlreadyUsed);\n                            break;\n\n                        default:\n                            setFormInfo(Messages.ServerError);\n                            break;\n                    }\n                    break;\n\n                default:\n                    setFormInfo(Messages.ServerError);\n            }\n            return;\n        }\n    }\n\n    return (\n        <div className=\"center\">\n            <Form {...formProps} />\n        </div>\n    );\n}","import Server from './server';\n\nexport default class Restaurant {\n    static get () {\n        return Server.makeARequest(\"/restaurant\");\n    }\n\n    static async set (body) {\n        return Server.makeARequest(\"/restaurant\", Server.Method.PUT, body);\n    }\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './about.css';\nimport Restaurant from '../../utils/restaurant';\nimport Messages from '../../utils/messages';\nimport Server from '../../utils/server';\n\nexport default function About() {\n    document.body.className = \"background\";\n    document.title = \"About\";\n\n    const [warning, setWarning] = useState(Messages.Empty);\n\n    const [restaurant, setRestaurant] = useState({\n        loadingStatus : Server.DataLoadingStatus.NotLoaded,\n        data : {}\n    });\n    \n    function loadData() {\n        if (restaurant.loadingStatus !== Server.DataLoadingStatus.NotLoaded)\n            return;\n        restaurant.loadingStatus = Server.DataLoadingStatus.Loading;\n        Restaurant.get()\n            .then ((result) => {\n                if (result.error) {\n                    setWarning(Messages.ServerError);\n                    return;\n                }\n                setRestaurant ({\n                    loadingStatus : Server.DataLoadingStatus.Loaded,\n                    data : result.data.restaurant\n                });\n            });\n    }\n\n    loadData();\n\n    return (\n        <div className=\"center text_container\">\n            {\n                warning !== Messages.Empty ?\n                warning\n                :\n                <React.Fragment>\n                    <img src = {restaurant.data.logoUrl} id=\"logo\" alt=\"logo\" className=\"light_shadow\" />\n                    <p className=\"emphasized text_container_title\">\n                        { restaurant.data.name }\n                    </p>\n                    <div id =\"website_version\">\n                        website v. 1.0\n                    </div>\n                    made by <Link to=\"http://t.me/daniilzhyrov\" className=\"no_link underline\"><u>Danya Zhyrov</u></Link>\n                    <br />\n                    supported by <Link to=\"https://progbase.herokuapp.com\" className=\"no_link underline\"><u>ProgBase</u></Link>\n                    <br />\n                    { restaurant.data.contacts }\n                    <br />\n                    { restaurant.data.address }\n                </React.Fragment>\n            }\n        </div>  \n    )\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './nav.css';\nimport User from '../../utils/user';\nimport  { getCurrentUser } from '../../utils/auth';\nimport Restaurant from '../../utils/restaurant';\nimport Messages from '../../utils/messages';\n\nexport default function Nav () {\n    const user = getCurrentUser();\n\n    const [restaurantName, setRestaurantName] = useState(Messages.Empty);\n    const [warning, setWarning] = useState(Messages.Empty);\n\n    if (restaurantName === Messages.Empty)\n        Restaurant.get()\n            .then((result) => {\n                if (result.error) {\n                    setWarning(Messages.ServerError);\n                    return;\n                }\n                setRestaurantName(result.data.restaurant.name);\n            });\n    \n    return (<nav className=\"shadow\">\n                {\n                    warning !== Messages.Empty ?\n                    <div id = \"main_label\">\n                        {warning}\n                    </div>\n                    :\n                    <React.Fragment>\n                        <Link to=\"/\" className={'no_link'}>\n                            <div id = \"main_label\">\n                                { restaurantName }\n                            </div>\n                        </Link>\n                        <div id=\"container\">\n                            {\n                                user\n                                ?\n                                    <React.Fragment>\n                                        <Link to=\"/order\" className=\"no_link menu_block\" >\n                                            My order\n                                        </Link>\n                                        <Link to=\"/menu\" className=\"no_link  menu_block\">\n                                            Menu\n                                        </Link>\n                                        {\n                                            (!isNaN(user.role) && Number(user.role) === User.UserRoles.Admin)\n                                            ?\n                                                <React.Fragment>\n                                                    <Link to=\"/users\" className={'no_link menu_block'}>\n                                                        Users\n                                                    </Link>\n                                                    <Link to=\"/settings\" className={'no_link menu_block'}>\n                                                        Settings\n                                                    </Link>\n                                                </React.Fragment>\n                                            : ''\n                                        }\n                                    </React.Fragment>\n                                : ''\n                            }\n                            <Link to=\"/about\" className={'no_link  menu_block'}>\n                                About\n                            </Link>\n                            {\n                                user\n                                ?\n                                <Link to={\"/users/\" + user.id} className={'no_link  menu_block'}>\n                                    { user ? user.fullname : ''}\n                                </Link>\n                                :\n                                <Link to=\"/auth/login\" className={'no_link  menu_block'}>\n                                    Login\n                                </Link>\n                            }\n                        </div>\n                    </React.Fragment>\n                }\n            </nav>\n        )\n}","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport Server from './../utils/server';\nimport Form from '../components/Form/Form';\nimport { getCurrentUser, processJWT } from '../utils/auth';\nimport User, { getRoleName } from '../utils/user';\nimport DefaultMessages from '../utils/messages';\n\nconst Messages = Object.assign({\n    PasswordMustMatch : \"Passwords must match\",\n    Saved : \"Saved\"\n}, DefaultMessages);\n\nconst WarningType = {\n    None : 0,\n    Loading : 1,\n    ServerError : 2,\n    ConnecionError : 3,\n    Forbidden : 4\n}\n\nexport default function EditUser(props) {\n    document.body.className = \"background\";\n\n    const sessionUser = getCurrentUser();\n    const id = props.match.params.id;\n\n    const [user, setUser] = useState({\n        isLoaded : false,\n        data : {}\n    });\n    const [warning, setWarning] = useState(WarningType.Loading);\n\n    let [formMessage, setFormMessage] = useState({\n        text : Messages.Empty,\n        color : Form.MessageColor.Default\n    });\n\n    function getProps (userToUse) {\n\n        if (!userToUse)\n            userToUse = user;\n        return {\n            inputs : [\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"username\",\n                        maxLength : \"32\",\n                        pattern : \"^[a-zA-Z0-9]+$\",\n                        placeholder : \"Login\",\n                        defaultValue : userToUse.data.username\n                    }\n                },\n                {\n                    type : sessionUser && sessionUser.role === User.UserRoles.Admin ? Form.InputType.Selector : Form.InputType.None,\n                    props : {\n                        name : \"role\",\n                        className : \"form_selector\",\n                        defaultValue : isNaN(userToUse.data.role) ? User.UserRoles.User : Number(userToUse.data.role)\n                    },\n                    disabledOption : \"Roles\",\n                    options : Object.values(User.UserRoles).map ((el) => {\n                        return {\n                            value : el,\n                            name : getRoleName(el)\n                        }\n                    })\n                },\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        type : \"password\",\n                        name : \"password\",\n                        maxLength : \"32\",\n                        placeholder : \"Password (not reqired)\"\n                    }\n                },\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        type : \"password\",\n                        name : \"confirm_password\",\n                        maxLength : \"32\",\n                        placeholder : \"Confirm password\"\n                    }\n                }\n            ],\n            cb : onSubmit,\n            labels : {\n                message : formMessage,\n                legend : \"Edit user\"\n            }\n        }\n    }\n\n    if (!sessionUser) \n        return <Redirect to={\"/auth/login?info=mustLogin&redirect=\" + props.location.pathname}/>\n\n    document.title = \"Edit \" + user.data.fullname ? user.data.fullname : \"user\";\n    \n    function setFormInfo(messageText, messageColor = Form.MessageColor.Default) {\n        setFormMessage ({\n            text : messageText,\n            color : messageColor\n        });\n    }\n\n    function setSubmitButtonFaded(faded) {\n        if (faded) {\n            document.getElementById('submit_button').style.opacity = 0.5;\n            document.getElementById('submit_button').style[\"pointer-events\"] = 'none';\n        } else {\n            document.getElementById('submit_button').style.opacity = 1;\n            document.getElementById('submit_button').style[\"pointer-events\"] = 'auto';\n        }\n    }\n\n    function onSubmit(form) {\n        const formData = new FormData(form);\n        const bodyData = new URLSearchParams(formData);\n        \n        setSubmitButtonFaded(true);\n        setFormInfo(Messages.Empty);\n\n        const fullname = bodyData.get(\"fullname\");\n        const password = bodyData.get(\"password\");\n        const confirmPassword = bodyData.get(\"confirm_password\");\n        const role = bodyData.get(\"role\");\n\n        if (password && password.length !== 0 && password !== confirmPassword) {\n            setSubmitButtonFaded(false);\n            setFormInfo(Messages.PasswordsNotMatch, Form.MessageColor.Red);\n            return;\n        }\n\n        const user = {\n            fullname : fullname,\n            password : password,\n            role : role,\n            id : id\n        }\n\n        User.update(user)\n            .then((result) => {\n                setSubmitButtonFaded(false);\n                if (result.error) {\n                    user.isLoaded = true;\n                    switch (result.error) {\n                        case Server.ErrorTypes.Unauthorized:\n                            return document.location = \"/auth/login?info=mustLogin&redirect=\" + props.location.pathname;\n\n                        case Server.ErrorTypes.ConnecionError:\n                            return setFormInfo(Messages.ConnecionError);\n\n                        default:\n                            return setFormInfo(Messages.ServerError);\n                    }\n                }\n                processJWT(result.data.jwt);\n                setFormInfo(Messages.Saved);\n                let new_user = user;\n                new_user.fullname = fullname;\n                new_user.role = role;\n                setUser ({\n                    isLoaded : true,\n                    data : new_user\n                });\n            });\n    }\n\n    if (sessionUser.role !== User.UserRoles.Admin && sessionUser.id !== id)\n        setWarning(WarningType.Forbidden);\n    else if (!user.isLoaded || (user.data.id && user.data.id !== id))\n        User.getById(id)\n            .then(result => {\n                const error = result.error;\n                user.isLoaded = true;\n                if (error) {\n                    switch (error) {\n                        case Server.ErrorTypes.NotFound:\n                            setWarning(Messages.NotFound);\n                            break;\n\n                        case Server.ErrorTypes.Unauthorized:\n                            setWarning(Messages.Unauthorized(props.location.pathname));\n                            break;\n\n                        case Server.ErrorTypes.ConnecionError:\n                            setWarning(Messages.ConnectionError);\n                            break;\n\n                        default:\n                            setWarning(Server.ErrorTypes.ServerError);\n                    }\n                    return;\n                }\n                const foundUser = result.data.user;\n                setUser({\n                    isLoaded : true,\n                    data : foundUser\n                });\n                setWarning(WarningType.None);\n            });\n    \n    return (\n        <div className=\"center\">\n            {\n                warning && warning !== \"\" ?\n                <div className=\"center\">\n                    { warning }\n                </div>\n                :\n                <React.Fragment>\n                    <Form {...getProps()}/>\n                </React.Fragment>\n            }\n        </div>\n    )\n}\n","import Server from \"./server\";\n\nexport default class ItemToOrder {\n\n    static getAll (page, query, numberOfRecordsOnAPage) {\n        let uri = `/itemsToOrder?numberOfRecordsOnAPage=${numberOfRecordsOnAPage}&page=`;\n        if (page)\n            uri += page;\n        else\n            uri += 1;\n        if (query)\n            uri += \"&query=\" + query;\n        return Server.makeARequest(uri);\n    }\n\n    static insert(formData) {\n        return Server.makeARequest(\"/itemsToOrder\", Server.Method.POST, formData);\n    }\n    \n    static getById (id) {\n        return Server.makeARequest(\"/itemsToOrder/\" + id);\n    }\n\n    static updateById (id, formData){\n        return Server.makeARequest('/itemsToOrder/'+id, Server.Method.PUT, formData);\n    }\n\n    static deleteById (id){\n        return Server.makeARequest('/itemsToOrder/' + id, Server.Method.DELETE);\n    }\n}","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport Server from './../utils/server';\nimport Form from '../components/Form/Form';\nimport User from '../utils/user';\nimport { getCurrentUser } from '../utils/auth';\nimport Item from '../utils/itemToOrder';\nimport DefaultMessages from '../utils/messages';\n\nconst Messages = Object.assign({\n    ImageTooLarge : \"Selected image is too large. Max image size 5mb.\"\n}, DefaultMessages);\n\nexport default function EditUser(props) {\n    document.body.className = \"background\";\n\n    const sessionUser = getCurrentUser();\n    const id = props.match.params.id;\n\n    const [item, setItem] = useState({\n        isLoaded : false,\n        data : {}\n    });\n    \n    const [warning, setWarning] = useState(Messages.Loading);\n\n    const [formMessage, setFormMessage] = useState ({\n        text : Messages.Empty,\n        color : Form.MessageColor.Default\n    });\n    \n    function getFormProps(){\n        return {\n            inputs : [\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"name\",\n                        maxLength : \"32\",\n                        placeholder : \"Name\",\n                        defaultValue : item.data.name\n                    }\n                },\n                {\n                    type : Form.InputType.TextArea,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"description\",\n                        maxLength : \"512\",\n                        placeholder : \"Description\",\n                        defaultValue : item.data.description\n                    }\n                },\n                {\n                    type : Form.InputType.Multiple,\n                    inputs : [\n                        {\n                            type : Form.InputType.Text,\n                            props : {\n                                required : true,\n                                type : \"number\",\n                                name : \"weight\",\n                                maxLength : \"32\",\n                                placeholder : \"Weight\",\n                                defaultValue : item.data.weight\n                            }\n                        },\n                        {\n                            type : Form.InputType.Text,\n                            props : {\n                                required : true,\n                                type : \"number\",\n                                name : \"price\",\n                                maxLength : \"32\",\n                                placeholder : \"Price\",\n                                defaultValue : item.data.price\n                            }\n                        }\n                    ]\n                },\n                {\n                    type : Form.InputType.File,\n                    label : \"Upload item image\",\n                    props : {\n                        type : \"file\",\n                        name : \"image\",\n                        id : \"form_image_input\",\n                        accept : \"image/jpeg\"\n                    }\n                }\n            ],\n            cb : onSubmit,\n            labels : {\n                message : formMessage,\n                legend : \"Edit item\"\n            }\n        };\n    }\n\n    if (!sessionUser) \n        return <Redirect to={\"/auth/login?info=mustLogin&redirect=\" + props.location.pathname}/>\n    if (sessionUser.role !== User.UserRoles.Admin && warning === Messages.Empty)\n        setWarning(Messages.Forbidden);\n\n    document.title = \"Edit \" + item.data.name ? item.data.name : \"item\";\n    \n    function setFormInfo(messageText, messageColor = Form.MessageColor.Default) {\n        setFormMessage({\n            text : messageText,\n            color : messageColor\n        });\n    }\n\n    function setSubmitButtonFaded(faded) {\n        if (faded) {\n            document.getElementById('submit_button').style.opacity = 0.5;\n            document.getElementById('submit_button').style[\"pointer-events\"] = 'none';\n        } else {\n            document.getElementById('submit_button').style.opacity = 1;\n            document.getElementById('submit_button').style[\"pointer-events\"] = 'auto';\n        }\n    }\n\n    function onSubmit(form) {\n        const formData = new FormData(form);\n        const bodyData = new URLSearchParams(formData);\n        \n        const name = bodyData.get(\"name\");\n        const description = bodyData.get(\"description\");\n        const weight = bodyData.get(\"weight\");\n        const price = bodyData.get(\"price\");\n\n        setSubmitButtonFaded(true);\n        setFormMessage({\n            text : Messages.Empty\n        });\n\n        Item.updateById(id, formData)\n            .then((result) => {\n                setSubmitButtonFaded(false);\n                if (result.error !== Server.ErrorTypes.None) {\n                    item.isLoaded = true;\n                    switch (result.error) {\n                        case Server.ErrorTypes.Unauthorized:\n                            setWarning(Messages.Unauthorized(props.location.pathname));\n                            break;\n\n                        case Server.ErrorTypes.ConnecionError:\n                            setFormInfo(Messages.ConnecionError, Form.MessageColor.Red);\n                            break;\n\n                        case Server.ErrorTypes.NotAcceptable:\n                            switch (result.data.error_code) {\n                                case 1:\n                                    setFormInfo(Messages.ImageTooLarge, Form.MessageColor.Red);\n                                    break;\n        \n                                default:\n                                    break;\n                            }\n                            break;\n\n                        default:\n                            setFormInfo(Messages.ServerError, Form.MessageColor.Red);\n                    }\n                    return;\n                }\n                setFormMessage({\n                    text : Messages.Saved,\n                    color : Form.MessageColor.Green\n                });\n                setItem ({\n                    isLoaded : true,\n                    data : {\n                        name,\n                        description,\n                        weight,\n                        price\n                    }\n                });\n            });\n    }\n\n    if (sessionUser.role !== User.UserRoles.Admin)\n        setWarning(Messages.Forbidden);\n    else if (!item.isLoaded || (item.data.id && item.data.id !== id))\n        Item.getById(id)\n            .then(result => {\n                const error = result.error;\n                item.isLoaded = true;\n                if (error) {\n                    switch (error) {\n                        case Server.ErrorTypes.NotFound:\n                            setWarning(Messages.NotFound);\n                            break;\n\n                        case Server.ErrorTypes.Unauthorized:\n                            setWarning(Messages.Unauthorized(props.location.pathname));\n                            break;\n\n                        case Server.ErrorTypes.ConnecionError:\n                            setWarning(Messages.ConnectionError);\n                            break;\n\n                        default:\n                            setWarning(Server.ErrorTypes.ServerError);\n                    }\n                    return;\n                }\n                setItem({\n                    isLoaded : true,\n                    data : result.data.item\n                });\n                setWarning(Messages.Empty);\n            });\n    \n    return (\n        <div className=\"center\">\n        {\n            warning && warning !== \"\" ? warning : <Form {...getFormProps()}/>\n        }\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport './itemsToOrder.css';\nimport User from '../../utils/user';\nimport Server from '../../utils/server';\nimport Item from '../../utils/itemToOrder';\nimport Messages from '../../utils/messages';\nimport { getCurrentUser } from '../../utils/auth';\nimport PagingButton from '../../components/pagingButtons/PagingButtons';\n\nconst WarningType = {\n    None : 0,\n    Loading : 1,\n    ServerError : 2,\n    ConnecionError : 3,\n    Unauthorized : 4\n}\n\nexport default function ItemsToOrder(props) {\n    const NumberOfRecordsOnAPage = 3;\n\n    document.body.className = \"background\";\n    document.title = \"Menu\";\n\n    const [warning, setWarning] = useState(WarningType.Loading);\n    const [items, setItems] = useState({\n        isLoaded : false,\n        page : 1,\n        pagesAmount : 0,\n        query : \"\",\n        data : []\n    })\n\n    const sesstionUser = getCurrentUser();\n    let admin;\n    if (!sesstionUser && warning === Messages.Empty)\n        setWarning(Messages.Forbidden);\n    if (sesstionUser)\n        admin = sesstionUser.role === User.UserRoles.Admin;\n\n    function loadItems() {\n        if (items.isLoaded)\n            return;\n        if (warning !== WarningType.Loading)\n            setWarning(WarningType.Loading);\n        Item.getAll(items.page, items.query, NumberOfRecordsOnAPage)\n            .then (result => {\n                if (result.error) {\n                    items.isLoaded = true;\n                    switch(result.error) {\n                        case Server.ErrorTypes.ConnecionError:\n                            setWarning (WarningType.ConnecionError);\n                            break;\n\n                        case Server.ErrorTypes.Unauthorized:\n                            setWarning (WarningType.Unauthorized);\n                            break;\n\n                        default:\n                            setWarning(WarningType.ServerError);\n                    }\n                    return;\n                }\n                setItems({\n                    page : items.page,\n                    query : items.query,\n                    isLoaded : true,\n                    pagesAmount : Number(Math.ceil(result.data.amountOfRecords / NumberOfRecordsOnAPage)),\n                    data : result.data.itemsToOrder\n                });\n                if (warning !== WarningType.None)\n                    setWarning(WarningType.None);\n                if (document.getElementById('search_field'))\n                    document.getElementById('search_field').value = items.query;\n            }) \n    }\n    \n    loadItems();\n    \n    function onSearchSubmit(form) {\n        const formData = new FormData(form);\n        const body = new URLSearchParams(formData);\n        \n        items.query = body.get(\"query\");\n        items.page = 1;\n        items.isLoaded = false;\n        loadItems();\n    }\n\n    function setPage (page) {\n        if (isNaN(page))\n            return;\n        items.page = Number(page);\n        items.isLoaded = false;\n        loadItems();\n    }\n\n    return (\n        <React.Fragment>\n            {\n                warning !== WarningType.None ?\n                    <div className=\"center\">\n                        { (warning === WarningType.ServerError) ? Messages.ServerError : \"\"}\n                        { (warning === WarningType.Loading) ? Messages.Loading : \"\" }\n                        { (warning === WarningType.Unauthorized) ? <Redirect to={\"/auth/login?info=mustLogin&redirect=\" + props.location.pathname} /> : \"\" }\n                        { (warning === WarningType.ConnecionError) ? Messages.ConnectionError : \"\" }\n                    </div>\n                :\n                    <React.Fragment>\n                        <div className=\"table card_view shadow\" id=\"item_table\">\n                            <form onSubmit= { e => { e.preventDefault(); onSearchSubmit(e.target) } } id=\"search_container\">\n                                {\n                                    admin ?\n                                    <Link id=\"add_new_item_button\" className=\"button no_link\" to={props.location.pathname + \"/new\"}>\n                                        + Add new\n                                    </Link>\n                                    : ''\n                                }\n                                <input id=\"search_field\" type=\"text\" name=\"query\" placeholder=\"Search by name\" maxLength=\"32\" className=\"input_field\" />\n                                <input id=\"search_submit_button\" type=\"image\" src=\"/images/search.png\" alt=\"Search\"/>\n                            </form>\n                            \n                            {\n                            (items.data && (items.data.length > 0)) ?\n                                <div id=\"item_container\">\n                                    {\n                                        items.data.map ((item, index) => {\n                                            return (\n                                                <Link key={index} to={props.location.pathname + \"/\" + item.id} className=\"item_box no_link\">\n                                                    <img src={item.imageUrl} alt={\"meal \" + item.name} id=\"item_image\" className=\"light_shadow\" />\n                                                    <div className=\"item_info\">\n                                                        <div className=\"item_name\">\n                                                            { item.name }\n                                                        </div>\n                                                        <div>\n                                                            <pre className=\"item_description\">{ item.description }</pre>\n                                                        </div>\n                                                    </div>\n                                                </Link>\n                                            )\n                                        })\n                                    }\n                                </div>\n                                :\n                                <div className=\"center\">\n                                    {\n                                        (items.query && (items.query > 0))\n                                        ? \"Nothing was found. Try another search term.\"\n                                        : \"There's nothing to see at yet\"\n                                    }\n                                </div>\n                            }\n                            <PagingButton pagesAmount={ items.pagesAmount } cb={ setPage } currentPage={ items.page } />\n                        </div>\n                        \n                    </React.Fragment>\n            }\n        </React.Fragment>\n    )\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './itemPage.css';\nimport { getCurrentUser } from '../../utils/auth';\nimport Server from '../../utils/server';\nimport Item from '../../utils/itemToOrder';\nimport User from '../../utils/user';\nimport ConfirmationForm from '../../components/confirmationForm/ConfirmationForm';\nimport Messages from '../../utils/messages';\n\nexport default function ItemPage (props) {\n    const [item, setItem] = useState({\n        loadingStatus : Server.DataLoadingStatus.NotLoaded,\n        data : {}\n    });\n\n    const [warning, setWarning] = useState(Messages.Empty);\n    const [added, setAdded] = useState(false);\n    const [confirmationWindowOpened, setConfirmationWindowOpened] = useState(false);\n    const id = props.match.params.id;\n\n    const confirmationForm = {\n        message : \"Are you sure?\",\n        onConfirm : () => {\n            Item.deleteById(id)\n                .then(() => {\n                    setWarning(Messages.Redirect(\"/menu\"));\n                });\n        },\n        onDecline : () => {\n            setConfirmationWindowOpened(false);\n        }\n    }\n\n    const sesstionUser = getCurrentUser();\n    let admin;\n    if (!sesstionUser && warning === Messages.Empty)\n        setWarning(Messages.Forbidden);\n    if (sesstionUser)\n        admin = sesstionUser.role === User.UserRoles.Admin;\n    \n    document.body.className = \"background\";\n    document.title = item.data.name ? item.data.name : \"Item\";\n\n    function loadData() {\n        if (item.loadingStatus !== Server.DataLoadingStatus.NotLoaded)\n            return;\n        item.loadingStatus = Server.DataLoadingStatus.Loading;\n        if (warning !== Messages.Loading)\n            setWarning(Messages.Loading);\n        Item.getById(id)\n            .then(result => {\n                item.loadingStatus = Server.DataLoadingStatus.Loaded;\n                if (result.error !== Server.ErrorTypes.None) {\n                    switch(result.error) {\n                        case Server.ErrorTypes.ConnecionError:\n                            setWarning(Messages.ConnecionError);\n                            break;\n\n                        case Server.ErrorTypes.NotFound:\n                            setWarning(Messages.NotFound);\n                            break;\n\n                        case Server.ErrorTypes.Unauthorized:\n                            setWarning(Messages.Unauthorized(props.location.pathname));\n                            break;\n\n                        default:\n                            setWarning(Messages.ServerError);\n                    }\n                    return;\n                }\n                setItem({\n                    loadingStatus : Server.DataLoadingStatus.Loaded,\n                    data : result.data.item\n                });\n                setWarning(Messages.Empty);\n            });\n    }\n\n    loadData();\n\n    function addToOrder() {\n        User.addItemToCurrentOrder(sesstionUser.id, id)\n            .then((result) => {\n                setAdded(true);\n            })\n    }\n\n    return (\n        <React.Fragment>\n        {\n            (warning !== Messages.Empty) ?\n            <div className=\"center\">\n                { warning }\n            </div>\n            :\n            <React.Fragment>\n                <div id=\"item_box\" className=\"table center card_view shadow\">\n                    <div className=\"item_subbox\">\n                        <div className=\"\" id=\"item_info\">\n                            <div id=\"item_name_box\">\n                                <p id=\"item_name\">\n                                    { item.data.name }\n                                </p>\n                                {\n                                    admin ?\n                                    <div>\n                                        <Link to={ props.location.pathname + \"/edit\" }>\n                                            <img alt=\"edit\" src=\"/images/edit.png\" className=\"item_action_image\" />\n                                        </Link>\n                                        <span onClick={ () => setConfirmationWindowOpened(true) }>\n                                            <img alt=\"edit\" src=\"/images/delete.png\" className=\"item_action_image\" />\n                                        </span>\n                                    </div>\n                                    : ''\n                                }\n                            </div>\n                            <p id=\"item_weight\">\n                                {item.data.weight ? item.data.weight + \" gr.\" : ''}\n                            </p>\n                            <p id=\"item_price\">\n                                {item.data.price ? \"$\" + item.data.price.toFixed(2) : ''}\n                            </p>\n                            <pre id=\"item_description\">{ item.data.description }</pre>\n                            <div className=\"button light_shadow item_button\" onClick={ addToOrder }>\n                                { added ? \"Added\" : \"Add to Order\" }\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"item_subbox\" id=\"image_subbox\">\n                        <img id=\"image\" src={item.data.imageUrl} alt={\"meal \" + item.name} className=\"light_shadow\" />\n                    </div>\n                </div>\n                {\n                    confirmationWindowOpened ?\n                        <ConfirmationForm {...confirmationForm}/>\n                    : ''\n                }\n            </React.Fragment>\n        }\n        </React.Fragment>\n    )\n}\n// /\n","import Server from './server';\n\nexport default class Order {\n\n    static getAll(page = 1, numberOfRecordsOnPage = 3) {\n        return Server.makeARequest(\"/orders?page=\" + page + \"&numberOfRecordsOnAPage=\"+numberOfRecordsOnPage);\n    }\n\n    static getAmount() {\n        return Server.makeARequest(\"/orders?option=onlyAmount\");\n    }\n\n    static deleteById (id) {\n        return Server.makeARequest(\"/orders/\" + id, Server.Method.DELETE);\n    }\n\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './orders.css';\nimport Server from '../../utils/server';\nimport Order from '../../utils/order';\nimport Messages from '../../utils/messages';\nimport PagingButton from '../../components/pagingButtons/PagingButtons';\n\nexport default function Orders(props) {\n    const NumberOfRecordsOnAPage = 3;\n\n    document.body.className = \"background\";\n    document.title = \"Order history\";\n\n    const [warning, setWarning] = useState(Messages.Loading);\n    const [deleteModeOn, setDeleteModeOn] = useState(false);\n    const [orders, setOrders] = useState({\n        loadingStatus : Server.DataLoadingStatus.NotLoaded,\n        page : 1,\n        pagesAmount : 0,\n        data : []\n    })\n\n    function loadOrders() {\n        if (orders.loadingStatus !== Server.DataLoadingStatus.NotLoaded)\n            return;\n        orders.loadingStatus = Server.DataLoadingStatus.Loading;\n        if (warning !== Messages.Loading)\n            setWarning(Messages.Loading);\n        Order.getAll(orders.page, NumberOfRecordsOnAPage)\n            .then (result => {\n                orders.isLoaded = Server.DataLoadingStatus.Loaded;\n                if (result.error) {\n                    switch(result.error) {\n                        case Server.ErrorTypes.ConnecionError:\n                            setWarning (Messages.ConnecionError);\n                            break;\n\n                        case Server.ErrorTypes.Unauthorized:\n                            setWarning (Messages.Unauthorized(props.location.pathname));\n                            break;\n\n                        default:\n                            setWarning(Messages.ServerError);\n                    }\n                    return;\n                }\n                for (let order of result.data.orders) {\n                    order.total = 0;\n                    for (let item of order.items)\n                        order.total += item.price;\n                }\n                setOrders({\n                    page : orders.page,\n                    loadingStatus : Server.DataLoadingStatus.Loaded,\n                    pagesAmount : (Math.ceil(result.data.amountOfRecords / NumberOfRecordsOnAPage)),\n                    data : result.data.orders\n                });\n                setWarning(Messages.Empty);\n            });\n    }\n    \n    loadOrders();\n\n    function setPage (page) {\n        if (isNaN(page))\n            return;\n        setOrders ({\n            loadingStatus : Server.DataLoadingStatus.NotLoaded,\n            page : Number(page),\n            pagesAmount : 0,\n            data : []\n        });\n    }\n\n    function onClickDelete (id) {\n        Order.deleteById(id)\n            .then((result) => {\n                if (result.error !== Server.ErrorTypes.None) {\n                    switch(result.error) {\n                        case Server.ErrorTypes.NotFound:\n                            setOrders ({\n                                loadingStatus : Server.DataLoadingStatus.NotLoaded,\n                                page : (orders.data.length > 1) ? orders.page : 1,\n                                pagesAmount : 0,\n                                data : []\n                            });\n                            break;\n\n                        case Server.ErrorTypes.Unauthorized:\n                            setWarning (Messages.Unauthorized(props.location.pathname));\n                            break;\n\n                        case Server.ErrorTypes.ConnecionError:\n                            setWarning (Messages.ConnecionError);\n                            break;\n\n                        default:\n                            setWarning (Messages.ServerError);\n                            break;\n                    }\n                    return;\n                }\n                setOrders ({\n                    loadingStatus : Server.DataLoadingStatus.NotLoaded,\n                    page : (orders.data.length > 1) ? orders.page : 1,\n                    pagesAmount : 0,\n                    data : []\n                });\n            })\n    }\n    \n    if (orders.data.length === 0 && warning === Messages.Empty && orders.data.loadingStatus === Server.DataLoadingStatus.Loaded) {\n        setWarning(Messages.NothingToShow);\n    }\n    return (\n        <React.Fragment>\n            {\n                warning !== Messages.Empty ?\n                    <div className=\"center\">\n                        { warning }\n                    </div>\n                :\n                    <React.Fragment>\n                        <div className=\"table card_view shadow\" id=\"order_table\">\n                            <div className =\"order_label_box\">\n                                <p className=\"emphasized\" id=\"order_label\">\n                                    Order history\n                                </p>\n                                <div className=\"button_outter order_action_button_outter\">\n                                    <div className=\"button\" onClick={ () => setDeleteModeOn(!deleteModeOn)}>\n                                        { deleteModeOn ? \"Exit\" : \"Delete order...\" }\n                                    </div>\n                                </div>\n                            </div>\n                            <div id = \"order_container\">\n                                {\n                                    orders.data.map((order, index) => {\n                                        return (\n                                            <div key={index} className=\"order_box_outter\">\n                                                <div className=\"card_view shadow order_box_inner\">\n                                                    <div className=\"order_item_box\">\n                                                        {\n                                                            order.items.map ((item, index) => {\n                                                                return (\n                                                                    <Link to={ \"/menu/\" + item.id } key={index} className=\"no_link card_view light_shadow order_item\">\n                                                                        <div className=\"order_item_name\">\n                                                                            {item.name}\n                                                                        </div>\n                                                                        { \"$\" + item.price.toFixed(2) }\n                                                                    </Link>\n                                                                )\n                                                            })\n                                                        }\n                                                    </div>\n                                                    <div className=\"order_total_price_box\">\n                                                        <div className=\"order_price\">\n                                                            Total :\n                                                        </div>\n                                                        { \"$\" + order.total.toFixed(2) }\n                                                    </div>\n                                                </div>\n                                                {\n                                                    deleteModeOn ?\n                                                    <div className=\"order_delete_layout\" onClick={ (e) => onClickDelete(e.target.getAttribute(\"order_id\")) }> \n                                                        <div order_id={order.id} className=\"order_delete_image_box\">\n                                                            <img order_id={order.id} className=\"order_delete_image\" alt=\"delete\" src=\"/images/delete.png\" />\n                                                        </div>\n                                                    </div>\n                                                    : ''\n                                                }\n                                            </div>\n                                        );\n                                    })\n                                }\n                            </div>\n                            <PagingButton pagesAmount={ orders.pagesAmount } cb={ setPage } currentPage={ orders.page } />\n                        </div>\n                        \n                    </React.Fragment>\n            }\n        </React.Fragment>\n    )\n}\n","import React, { useState } from 'react';\n\nimport Item from '../utils/itemToOrder';\nimport Server from '../utils/server';\nimport Form from '../components/Form/Form';\nimport DefaultMessages from '../utils/messages';\nimport User from '../utils/user';\nimport { getCurrentUser } from '../utils/auth';\n\nconst Messages = Object.assign ({\n    ImageTooLarge : \"Selected image is too large. Max image size 5mb.\"\n}, DefaultMessages)\n\nexport default function NewItem(props) {\n    const [warning, setWarning] = useState(Messages.Empty);\n\n    const [formProps, setFormProps] = useState ({\n        inputs : [\n            {\n                type : Form.InputType.Text,\n                props : {\n                    required : true,\n                    type : \"text\",\n                    name : \"name\",\n                    maxLength : \"32\",\n                    placeholder : \"Name\"\n                }\n            },\n            {\n                type : Form.InputType.TextArea,\n                props : {\n                    required : true,\n                    type : \"text\",\n                    name : \"description\",\n                    maxLength : \"512\",\n                    placeholder : \"Description\"\n                }\n            },\n            {\n                type : Form.InputType.Multiple,\n                inputs : [\n                    {\n                        type : Form.InputType.Text,\n                        props : {\n                            required : true,\n                            type : \"number\",\n                            name : \"weight\",\n                            maxLength : \"32\",\n                            placeholder : \"Weight\"\n                        }\n                    },\n                    {\n                        type : Form.InputType.Text,\n                        props : {\n                            required : true,\n                            type : \"number\",\n                            name : \"price\",\n                            maxLength : \"32\",\n                            placeholder : \"Price\"\n                        }\n                    }\n                ]\n            },\n            {\n                type : Form.InputType.File,\n                label : \"Upload item image\",\n                props : {\n                    type : \"file\",\n                    name : \"image\",\n                    id : \"form_image_input\",\n                    accept : \"image/jpeg\"\n                }\n            }\n        ],\n        cb : onSubmit,\n        labels : {\n            message : {\n                text : Messages.Empty,\n                color : Form.MessageColor.Default\n            },\n            legend : \"Add new item\"\n        }\n    });\n\n    const sessionUser = getCurrentUser();\n    if (!sessionUser)\n        return Messages.Unauthorized(props.location.pathname);\n    if (!sessionUser.role === User.UserRoles.Admin)\n        setWarning(Messages.Forbidden);\n\n    function setFormInfo(messageText, messageColor = Form.MessageColor.Default) {\n        const props = Object.assign({}, formProps);\n        props.labels.message = {\n            text : messageText,\n            color : messageColor\n        };\n        setFormProps(props);\n    }\n\n    function setSubmitButtonFaded(faded) {\n        if (faded) {\n            document.getElementById('submit_button').style.opacity = 0.5;\n            document.getElementById('submit_button').style[\"pointer-events\"] = 'none';\n        } else {\n            document.getElementById('submit_button').style.opacity = 1;\n            document.getElementById('submit_button').style[\"pointer-events\"] = 'auto';\n        }\n    }\n\n    document.body.className = \"background\";\n    document.title = \"Create item\";\n\n    async function onSubmit(form) {\n        setFormInfo(Messages.Empty);\n        setSubmitButtonFaded(true);\n        \n        const formData = new FormData(form);\n\n        const result = await Item.insert(formData);\n        \n        setSubmitButtonFaded(false);\n        if (result.error !== Server.ErrorTypes.None) {\n            switch (result.error) {\n                case Server.ErrorTypes.Unauthorized:\n                    setWarning(Messages.Unauthorized(props.location.pathname));\n                    break;\n\n                case Server.ErrorTypes.ConnecionError:\n                    setFormInfo(Messages.ConnectionError, Form.MessageColor.Red);\n                    break;\n\n                case Server.ErrorTypes.NotAcceptable:\n                    switch (result.data.error_code) {\n                        case 1:\n                            setFormInfo(Messages.ImageTooLarge, Form.MessageColor.Red);\n                            break;\n\n                        default:\n                            break;\n                    }\n                    break;\n\n                default:\n                    setFormInfo(Messages.ServerError, Form.MessageColor.Red);\n            }\n            return;\n        }\n        setFormInfo(Messages.Saved, Form.MessageColor.Green);\n        setTimeout (() => {\n            setWarning(Messages.Redirect(\"/menu\"));\n        }, 2700);\n    }\n\n    return (\n        <div className=\"center\">\n            {\n                (warning && warning !== \"\") ?\n                    warning\n                :\n                    <Form {...formProps} />\n            }\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './settings.css';\nimport Form from '../../components/Form/Form';\nimport Server from '../../utils/server';\nimport DefaultMessages from '../../utils/messages';\nimport Restaurant from '../../utils/restaurant';\nimport { getCurrentUser } from '../../utils/auth';\nimport User from '../../utils/user';\n\nconst Messages = Object.assign ({\n    ImageTooLarge : \"Selected image is too large. Max image size 5mb.\"\n}, DefaultMessages);\n\nexport default function Settings (props) {\n    document.body.className = \"background\";\n    document.title = \"Settings\";\n\n    const [warning, setWarning] = useState(Messages.Empty);\n    const [restaurant, setRestaurant] = useState({\n        loadingStatus : Server.DataLoadingStatus.NotLoaded,\n        data : {}\n    });\n\n    const [formMessage, setFormMessage] = useState({\n        text : Messages.Empty,\n        color : Form.MessageColor.Default\n    });\n\n    const sessionUser = getCurrentUser();\n    if (!sessionUser && warning === Messages.Empty)\n        setWarning(Messages.Unauthorized(props.location.pathname));\n    if (sessionUser && sessionUser.role !== User.UserRoles.Admin && warning === Messages.Empty)\n        setWarning(Messages.Forbidden);\n    if (sessionUser && sessionUser.role === User.UserRoles.Admin) {\n        function loadData () {\n            if (restaurant.loadingStatus !== Server.DataLoadingStatus.NotLoaded) \n                return;\n            restaurant.loadingStatus = Server.DataLoadingStatus.Loading;\n            Restaurant.get()\n                .then(result => {\n                    if (result.error){\n                        setWarning(Messages.ServerError);\n                        return;\n                    }\n                    setRestaurant({\n                        loadingStatus : Server.DataLoadingStatus.Loaded,\n                        data : result.data.restaurant\n                    });\n                })\n        }\n    \n        loadData();\n    }\n\n\n    function getFormProps() {\n        return {\n            inputs : [\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"restaurant_name\",\n                        maxLength : \"32\",\n                        pattern : \"^[a-zA-Z0-9]+$\",\n                        placeholder : \"Restaurant name\",\n                        className : \"input_field form_input\",\n                        defaultValue : restaurant.data.name\n                    }\n                },\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"restaurant_contacts\",\n                        maxLength : \"32\",\n                        placeholder : \"Contacts\",\n                        className : \"input_field form_input\",\n                        defaultValue : restaurant.data.contacts\n                    }\n                },\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"restaurant_address\",\n                        maxLength : \"32\",\n                        placeholder : \"Address\",\n                        className : \"input_field form_input\",\n                        defaultValue : restaurant.data.address\n                    }\n                },\n                {\n                    type : Form.InputType.File,\n                    label : \"Upload logo\",\n                    props : {\n                        type : \"file\",\n                        name : \"image\",\n                        id : \"form_image_input\",\n                        accept : \"image/jpeg\"\n                    }\n                }\n            ],\n            cb : onSubmit,\n            labels : {\n                message : formMessage,\n                legend : \"Settings\"\n            }\n        };\n    }\n\n    function onSubmit(form) {\n        setFormMessage({\n            text : Messages.Empty,\n            color : Form.MessageColor.Default\n        });\n\n        const formData = new FormData(form);\n\n        Restaurant.set(formData)\n            .then(result => {\n                if (result.error) {\n                    setFormMessage({\n                        text : Messages.ServerError,\n                        color : Form.MessageColor.Red\n                    });\n                    return;\n                }\n                setFormMessage({\n                    text : Messages.Saved,\n                    color : Form.MessageColor.Green\n                });\n            });\n    }\n\n    return (\n        <div className = \"center\">\n            {\n                warning !== Messages.Empty ?\n                warning\n                :\n                <React.Fragment>\n                    <Form {...getFormProps()}/>\n                    <div className=\"button_outter\" id=\"settings_manage_button\">\n                        <Link className=\"button light_shadow no_link\" to={\"/restaurants/\" + restaurant.id + \"/rooms\"}>\n                            Manage the rooms\n                        </Link>\n                    </div>\n                </React.Fragment>\n            }\n        </div>\n    );\n}","import Server from \"../utils/server\"\n\nexport default class Room {\n    static getAll(page, numberOfRecordsOnAPage, restaurantId) {\n        return Server.makeARequest(\"/rooms?page=\" + page +\"&numberOfRecordsOnAPage=\" + numberOfRecordsOnAPage + \"&restaurant_id=\" + restaurantId );\n    }\n\n    static getById(id) {\n        return Server.makeARequest(\"/rooms/\" + id);\n    }\n\n    static deleteById(id) {\n        return Server.makeARequest(\"/rooms/\" + id, Server.Method.DELETE);\n    }\n\n    static insert(body) {\n        return Server.makeARequest(\"/rooms\", Server.Method.POST, body);\n    }\n\n    static updateById(id, body) {\n        return Server.makeARequest(\"/rooms/\" + id, Server.Method.PUT, body);\n    }\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './rooms.css';\nimport Room from '../../utils/room';\nimport { getCurrentUser } from '../../utils/auth';\nimport User from '../../utils/user';\nimport PagingButton from '../../components/pagingButtons/PagingButtons';\nimport Messages from '../../utils/messages';\nimport Server from '../../utils/server';\n\nexport default function Rooms(props) {\n    document.body.className = \"background\";\n    document.title = \"About\";\n\n    const restaurantId = props.match.params.restaurant_id;\n    const NumberOfRecordsOnAPage = 6;\n    const [warning, setWarning] = useState(Messages.Empty);\n\n    const [rooms, setRooms] = useState({\n        loadingStatus : Server.DataLoadingStatus.NotLoaded,\n        page : 1,\n        pagesAmount : 0,\n        data : []\n    });\n    \n    const sessionUser = getCurrentUser();\n    if (!sessionUser && warning === Messages.Empty)\n        setWarning(Messages.Unauthorized(props.location.pathname));\n    if (sessionUser && sessionUser.role !== User.UserRoles.Admin && warning === Messages.Empty)\n        setWarning(Messages.Forbidden);\n    if (sessionUser && sessionUser.role !== User.UserRoles.Admin) {\n        function loadData() {\n            if (rooms.loadingStatus !== Server.DataLoadingStatus.NotLoaded)\n                return;\n            rooms.loadingStatus = Server.DataLoadingStatus.Loading;\n            Room.getAll(rooms.page, NumberOfRecordsOnAPage, restaurantId)\n                .then (result => {\n                    if (result.error) {\n                        switch(result.error) {\n                            case Server.ErrorTypes.Forbidden:\n                                setWarning(Messages.Forbidden);\n                                break;\n\n                            case Server.ErrorTypes.Unauthorized:\n                                setWarning(Messages.Unauthorized(props.location.pathname));\n                                break;\n                        \n                            default:\n                                setWarning(Messages.ServerError);\n                        }\n                        return;\n                    }\n                    setRooms ({\n                        loadingStatus : Server.DataLoadingStatus.Loaded,\n                        page : rooms.page,\n                        pagesAmount : Math.ceil ((result.data.numberOfRecords ) / NumberOfRecordsOnAPage),\n                        data : result.data.rooms\n                    });\n                });\n        }\n    \n        loadData();\n    }\n\n    function setPage(page) {\n        if (isNaN(page))\n            return;\n        setRooms ({\n            loadingStatus : Server.DataLoadingStatus.NotLoaded,\n            page : Number(page),\n            pagesAmount : 0,\n            data : []\n        });\n    }\n\n    if (rooms.data.length === 0 && warning === Messages.Empty && rooms.data.loadingStatus === Server.DataLoadingStatus.Loaded)\n        setWarning(Messages.NothingToShow);\n\n    function renderRoom(room) {\n        return (\n            <Link className=\"card_view light_shadow room_cell no_link\" to={ props.location.pathname + \"/\" + room.id }>\n                <div className=\"room_name_label\">\n                    {room.name}\n                </div>\n                <div className=\"room_tables_label\">\n                    { room.amountOfTables + \" table\" + ((room.amountOfTables !== 1) ? \"s\" : \"\") }\n                </div>\n\n                <div className=\"room_description_label\">\n                    { room.description }\n                </div>\n            </Link>\n        );\n    }\n\n    return (\n        warning !== Messages.Empty ?\n        <div className=\"center\">\n            { warning }\n        </div>\n        :\n        <div className=\"table card_view shadow\" id=\"order_table\">  \n            <div className =\"room_label_box\">\n                <p className=\"emphasized\" id=\"room_label\">\n                    Rooms\n                </p>\n                <div className=\"button_outter room_action_button_outter\">\n                    <Link className=\"button no_link\" to={props.location.pathname + \"/new\"}>\n                        Add new\n                    </Link>\n                </div>\n            </div>\n\n            <div className=\"rooms_row\">\n                {\n                    rooms.data.slice(0, 3).map ((room, index) => {\n                        return renderRoom(room);\n                    })\n                }\n            </div>\n            <div className=\"rooms_row rooms_second_row\">\n                {\n                    rooms.data.slice(3, 6).map ((room, index) => {\n                        return renderRoom(room);\n                    })\n                }\n            </div>\n\n            <PagingButton pagesAmount={ rooms.pagesAmount } cb={ setPage } currentPage={ rooms.page } />\n        \n        </div>\n    )\n}\n","import React, { useState } from 'react';\n\nimport Room from '../utils/room';\nimport Server from '../utils/server';\nimport Form from '../components/Form/Form';\nimport Messages from '../utils/messages';\nimport User from '../utils/user';\nimport { getCurrentUser } from '../utils/auth';\n\nexport default function NewRoom(props) {\n\n    const restaurantId = props.match.params.restaurant_id;\n    const [warning, setWarning] = useState(Messages.Empty);\n    const [formMessage, setFormMessage] = useState(Messages.Empty);\n\n    function getFormProps() {\n        return {\n            inputs : [\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"name\",\n                        maxLength : \"16\",\n                        placeholder : \"Room name\"\n                    }\n                },\n                {\n                    type : Form.InputType.TextArea,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"description\",\n                        maxLength : \"64\",\n                        placeholder : \"Description\"\n                    }\n                }\n            ],\n            cb : onSubmit,\n            labels : {\n                message : formMessage,\n                legend : \"Add new room\"\n            }\n        };\n    }\n\n    const sessionUser = getCurrentUser();\n    if (!sessionUser && warning === Messages.Empty)\n        setWarning(Messages.Unauthorized(props.location.pathname));\n    if(sessionUser.role !== User.UserRoles.Admin && warning === Messages.Empty)\n        setWarning(Messages.Forbidden);\n\n    function setSubmitButtonFaded(faded) {\n        if (faded) {\n            document.getElementById('submit_button').style.opacity = 0.5;\n            document.getElementById('submit_button').style[\"pointer-events\"] = 'none';\n        } else {\n            document.getElementById('submit_button').style.opacity = 1;\n            document.getElementById('submit_button').style[\"pointer-events\"] = 'auto';\n        }\n    }\n\n    document.body.className = \"background\";\n    document.title = \"Create room\";\n\n    async function onSubmit(form) {\n        \n        setFormMessage ({\n            text : Messages.Empty,\n            color : Form.MessageColor.Default\n        });\n        setSubmitButtonFaded(true);\n        \n        const formData = new FormData(form);\n\n        formData.set(\"restaurant_id\", restaurantId);\n\n        for (let key of formData.keys()) {\n            console.log(key)\n        }\n    \n\n        const result = await Room.insert(formData);\n        \n        setSubmitButtonFaded(false);\n        if (result.error !== Server.ErrorTypes.None) {\n            switch (result.error) {\n                case Server.ErrorTypes.Unauthorized:\n                    setWarning(Messages.Unauthorized(props.location.pathname));\n                    break;\n\n                case Server.ErrorTypes.ConnecionError:\n                    setFormMessage ({\n                        text : Messages.ConnectionError,\n                        color : Form.MessageColor.Red\n                    });\n                    break;\n\n                default:\n                    setFormMessage ({\n                        text : Messages.ServerError,\n                        color : Form.MessageColor.Red\n                    });\n            }\n            return;\n        }\n        setFormMessage ({\n            text : Messages.Saved,\n            color : Form.MessageColor.Green\n        });\n    }\n\n    return (\n        <div className=\"center\">\n            {\n                (warning && warning !== \"\") ?\n                    warning\n                :\n                    <Form {...getFormProps()} />\n            }\n        </div>\n    );\n}","import React, { useState } from 'react';\n\nimport './roomPage.css';\nimport { getCurrentUser } from '../../utils/auth';\nimport Server from '../../utils/server';\nimport Room from '../../utils/room';\nimport User from '../../utils/user';\nimport Form from '../../components/Form/Form';\nimport ConfirmationForm from '../../components/confirmationForm/ConfirmationForm';\nimport Messages from '../../utils/messages';\n\nexport default function RoomPage (props) {\n    const [room, setRoom] = useState({\n        loadingStatus : Server.DataLoadingStatus.NotLoaded,\n        data : {\n            size : {\n                height : 8,\n                width : 8\n            }\n        }\n    });\n\n    const [warning, setWarning] = useState(Messages.Empty);\n    const [formMessage, setFormMessage] = useState({\n        text : Messages.Empty,\n        color : Form.MessageColor.Default\n    });\n    const [confirmationWindowOpened, setConfirmationWindowOpened] = useState(false);\n    const restaurantId = props.match.params.restaurant_id;\n    const roomId = props.match.params.room_id;\n\n    const confirmationForm = {\n        message : \"Are you sure?\",\n        onConfirm : () => {\n            Room.deleteById(roomId)\n                .then(() => {\n                    setWarning(Messages.Redirect(\"/restaurants/\" + restaurantId + \"/rooms\" ));\n                });\n        },\n        onDecline : () => {\n            setConfirmationWindowOpened(false);\n        }\n    }\n\n    const sessionUser = getCurrentUser();\n    if (!sessionUser)\n        setWarning(Messages.Unauthorized(props.location.pathname));\n    else if (sessionUser.role !== User.UserRoles.Admin)\n        setWarning(Messages.Forbidden);\n    else {\n        function loadData () {\n            if (room.loadingStatus !== Server.DataLoadingStatus.NotLoaded)\n                return;\n            room.loadingStatus = Server.DataLoadingStatus.Loading;\n            Room.getById(roomId)\n                .then (result => {\n                    room.loadingStatus = Server.DataLoadingStatus.Loaded;\n                    if (result.error) {\n                        switch(result.error) {\n                            case Server.ErrorTypes.ConnecionError:\n                                setWarning(Messages.ConnecionError);\n                                break;\n    \n                            case Server.ErrorTypes.NotFound:\n                                setWarning(Messages.NotFound);\n                                break;\n    \n                            case Server.ErrorTypes.Unauthorized:\n                                setWarning(Messages.Unauthorized(props.location.pathname));\n                                break;\n    \n                            default:\n                                setWarning(Messages.ServerError);\n                        }\n                        return;\n                    }\n                    console.log(result.data.room);\n                    setRoom ({\n                        loadingStatus : Server.DataLoadingStatus.Loaded,\n                        data : result.data.room\n                    });\n                })\n        }\n\n        loadData();\n    }\n    \n    document.body.className = \"background\";\n    document.title = room.data.name ? room.data.name : \"Room\";\n\n    function getFormProps() {\n        return {\n            inputs : [\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"name\",\n                        maxLength : \"16\",\n                        placeholder : \"Room name\",\n                        defaultValue : room.data.name\n                    }\n                },\n                {\n                    type : Form.InputType.TextArea,\n                    props : {\n                        required : true,\n                        type : \"text\",\n                        name : \"description\",\n                        maxLength : \"64\",\n                        placeholder : \"Description\",\n                        defaultValue : room.data.description\n                    }\n                },\n                {\n                    type : Form.InputType.Text,\n                    props : {\n                        required : true,\n                        type : \"number\",\n                        name : \"amountOfTables\",\n                        maxLength : \"16\",\n                        placeholder : \"Amount of tables\",\n                        defaultValue : room.data.amountOfTables\n                    }\n                },\n                {\n                    type : Form.InputType.Button,\n                    label : \"Delete\",\n                    onClick : () => setConfirmationWindowOpened(true)\n                },\n            ],\n            cb : onSubmit,\n            labels : {\n                message : formMessage,\n                legend : \"Edit room\"\n            }\n        };\n    }\n\n    function onSubmit(form) {\n        Room.updateById(roomId, new FormData(form))\n            .then((result) => {\n                if (result.error) {\n                    setFormMessage({\n                        text : Messages.ServerError,\n                        color : Form.MessageColor.Red\n                    })\n                }\n                setFormMessage({\n                    text : Messages.Saved,\n                    color : Form.MessageColor.Green\n                })\n            })\n    }\n    \n    return (\n        (warning !== Messages.Empty) ?\n            <div className=\"center\">\n                { warning }\n            </div>\n            :\n            <div className=\"center\">\n                <Form {...getFormProps()} />\n                \n                {\n                    confirmationWindowOpened ?\n                        <ConfirmationForm {...confirmationForm}/>\n                    : ''\n                }\n            </div>\n    )\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as qs from 'query-string';\n\nimport './orderPage.css';\nimport { getCurrentUser } from '../../utils/auth';\nimport Server from '../../utils/server';\nimport User from '../../utils/user';\nimport Messages from '../../utils/messages';\n\nexport default function OrderPage (props) {\n    document.body.className = \"background\";\n    document.title = \"My Order\";\n    \n    const [warning, setWarning] = useState(Messages.Loading);\n    const [order, setOrder] = useState({\n        loadingStatus : Server.DataLoadingStatus.NotLoaded,\n        data : {\n            totalPrice : 0\n        }\n    });\n\n    const sessionUser = getCurrentUser();\n    \n    let userId;\n    if (sessionUser)\n        userId = sessionUser.id;\n    const query = qs.parse(props.location.search);\n    if (query.user_id && sessionUser.role !== User.UserRoles.User)\n        userId = String (query.user_id);\n\n    if (!sessionUser && warning === Messages.Empty)\n        setWarning(Messages.Unauthorized(props.location.pathname));\n    else {\n        function loadData () {\n            if (order.loadingStatus !== Server.DataLoadingStatus.NotLoaded)\n                return;\n            order.loadingStatus = Server.DataLoadingStatus.Loading;\n            if (warning !== Messages.Loading)\n                setWarning(Messages.Loading);\n            User.getById(userId)\n                .then(result => {\n                    if (result.error) {\n                        switch (result.error) {\n                            case Server.ErrorTypes.Unauthorized:\n                                setWarning(Messages.Unauthorized(props.location.pathname));\n                                break;\n\n                            case Server.ErrorTypes.ConnecionError:\n                                setWarning(Messages.ConnecionError);\n                                break;\n\n                            case Server.ErrorTypes.NotFound:\n                                setWarning(Messages.NotFound);\n                                break;\n\n                            default:\n                                setWarning(Messages.ServerError);\n                        }\n                        return;\n                    }\n                    let order = result.data.user.currentOrder;\n                    if (order) {\n                        order.totalPrice = 0;\n                        for (let item of order.items) \n                            order.totalPrice += item.price;\n                    }\n                    setOrder({\n                        loadingStatus : Server.DataLoadingStatus.Loaded,\n                        data : order\n                    });\n                    setWarning(Messages.Empty);\n                });\n        }\n\n        loadData();\n    }\n\n    function startNewOrder() {\n        User.startNewOrder(userId)\n            .then (result => {\n                if (result.error) {\n                    switch(result.error) {\n                        case Server.ErrorTypes.Unauthorized:\n                            setWarning(Messages.Unauthorized(props.location.pathname));\n                            break;\n\n                        case Server.ErrorTypes.ConnecionError:\n                            setWarning(Messages.ConnecionError);\n                            break;\n\n                        default:\n                            setWarning(Messages.ServerError);\n                    }\n                    return;\n                }\n                const order = result.data.new_order;\n                \n                if (order) {\n                    order.totalPrice = 0;\n                    for (let item of order.items) \n                        order.totalPrice += item.price;\n                }\n                setOrder ({\n                    loadingStatus : Server.DataLoadingStatus.Loaded,\n                    data : order\n                })\n            })\n    }\n\n    function callWaiter() {\n        User.callWaiter(sessionUser.id)\n    }\n\n    function orderCompleted() {\n        User.setCurrentOrderCompleted(userId)\n            .then(() => setWarning(Messages.Redirect(\"/users/\" + userId)))\n    }\n    \n    return (\n        (warning !== Messages.Empty) ?\n        <div className=\"center\">\n            { warning }\n        </div>\n        :\n        (!order.data) ?\n            <div className=\"center\">\n                You've not started Your Order\n                <div className=\"button_outter\">\n                    <div className=\"button\" onClick={ startNewOrder }>\n                        Start new Order\n                    </div>\n                </div>\n            </div>\n        :\n        <div id=\"order_main_box\" className=\"table center card_view shadow\">\n            <div id=\"order_item_list\">\n                {\n                    (!order.data.items || order.data.items.length === 0) ?\n                        <div id=\"no_items_label_box\">\n                            <div id=\"no_items_label\">\n                                You've got no items for now. Browse our <Link className=\"no_link\" to=\"/menu\">Menu</Link> page.\n                            </div>\n                        </div>\n                    :\n                    order.data.items.map ((item, index) => {\n                        return (\n                            <Link to={\"/menu/\" + item._id}  key={index} id=\"order_item_box\" className=\"no_link card_view light_shadow\">\n                                <div>\n                                    { item.name }\n                                </div>\n                                <div>\n                                    { \"$\" + item.price.toFixed(2) }\n                                </div>\n                            </Link>\n                        )\n                    })\n                }\n            </div>\n            <div id=\"order_total_price_box\"> \n                <div>\n                    Total:\n                </div>\n                <div id=\"order_total_price_label\">\n                    { \"$\" + order.data.totalPrice.toFixed(2) }\n                </div>\n            </div>\n\n            <div className=\"button_outter\"> \n                <div className=\"button\" onClick={ callWaiter }>\n                    Call waiter\n                </div>\n            </div>\n\n            {\n                sessionUser.role !== User.UserRoles.User ?\n                <div className=\"button_outter\"> \n                    <div className=\"button\" onClick={ orderCompleted }>\n                        Order completed\n                    </div>\n                </div>\n                : ''\n            }\n            \n        </div>\n    )\n}\n// /\n","import React, { useState } from 'react';\nimport * as qs from 'query-string';\n\nimport { getCurrentUser } from '../utils/auth';\nimport User from '../utils/user';\nimport Messages from '../utils/messages';\n\nexport default function BotAuth (props) {\n    document.body.className = \"background\";\n    document.title = \"Auth\";\n\n    const [warning, setWarning] = useState(Messages.Empty);\n\n    const sessionUser = getCurrentUser();\n    const query = qs.parse(props.location.search);\n    if (sessionUser.role === User.UserRoles.User || !query.id)\n        setWarning(Messages.Forbidden);\n    \n    async function onClick() {\n        try {\n            const user = (await User.getById(sessionUser.id)).data.user;\n            console.log(user);\n            user.telegramId = query.id;\n            await User.update(user);\n            setWarning(Messages.Successfully);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    return (\n        <div className=\"center\">\n            {\n                warning !== Messages.Empty ?\n                warning\n                :\n                <div className=\"text_container\">\n                    Are you sure you want to link this telegram to Your account?\n                    <div className=\"button_outter\">\n                        <div className=\"button\" onClick={ onClick }>\n                            Yes\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    );\n}","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nimport Index from './Index/Index';\nimport Login from './Login';\nimport Users from './users/Users';\nimport UserPage from './user/UserPage';\nimport NotFound from './NotFound.js';\nimport Register from './Register';\nimport About from './about/About';\nimport Nav from '../components/nav/Nav';\nimport EditUser from './EditUser';\nimport EditItem from './EditItem';\nimport ItemsToOrder from './ItemsToOrder/ItemsToOrder';\nimport ItemPage from './ItemPage/ItemPage';\nimport Orders from './Orders/Orders';\nimport NewItem from './NewItem';\nimport Settings from './Settings/Settings';\nimport Rooms from './Rooms/Rooms';\nimport NewRoom from './NewRoom';\nimport RoomPage from './RoomPage/RoomPage';\nimport Order from './OrderPage/OrderPage';\nimport BotAuth from './BotAuth';\n\nfunction App() {\n  return (\n    <Router>\n      <Nav />\n      <Switch>\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/auth/register\" exact component={Register} />\n        <Route path=\"/auth/login\" exact component={Login} />\n        <Route path=\"/menu\" exact component={ItemsToOrder} />\n        <Route path=\"/menu/new\" exact component={NewItem} />\n        <Route path=\"/menu/:id\" exact component={ItemPage} />\n        <Route path=\"/menu/:id/edit\" exact component={EditItem} />\n        <Route path=\"/users\" exact component={Users} />\n        <Route path=\"/users/:id\" exact component={UserPage} />\n        <Route path=\"/users/:id/edit\" exact component={EditUser} />\n        <Route path=\"/orders\" exact component={Orders} />\n        <Route path=\"/about\" exact component={About} />\n        <Route path=\"/order\" exact component={Order} />\n        <Route path=\"/settings\" exact component={Settings} />\n        <Route path=\"/bot/auth\" exact component={BotAuth} />\n        <Route path=\"/restaurants/:restaurant_id/rooms\" exact component={Rooms} />\n        <Route path=\"/restaurants/:restaurant_id/rooms/new\" exact component={NewRoom} />\n        <Route path=\"/restaurants/:restaurant_id/rooms/:room_id\" exact component={ RoomPage } />\n        <Route path=\"/not_found\" exact component={NotFound} />\n        <Route path=\"/\" component={NotFound} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}